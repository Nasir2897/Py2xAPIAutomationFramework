{"name": "Verify that Create Booking Status and Booking ID shouldn't be null", "status": "failed", "statusDetails": {"message": "Failed: Failed : JSON schema error", "trace": "self = <tests.test.crud.test_jsonschema.TestCreateBookingJSONSchema object at 0x10ec37190>\n\n    @pytest.mark.positive\n    @allure.title(\"Verify that Create Booking Status and Booking ID shouldn't be null\")\n    @allure.description(\n        \"Creating a Booking from the paylaod and verfiy that booking id should not be null and status code should be 200 for the correct payload\")\n    def test_create_booking_schema(self):\n        response = post_request(url=APIConstants.url_create_booking(),\n                                auth=None,\n                                headers=Util().common_headers_json(),\n                                payload=payload_create_booking(),\n                                in_json=False)\n    \n        booking_id = response.json()[\"bookingid\"]\n    \n        verfiy_http_status_code(response_data=response, expect_data=200)\n        verify_json_key_for_not_null(booking_id)\n    \n        # response with schema.json stored\n        file_path = os.getcwd() + \"/create_schema.json\"\n        schema = self.load_schema(file_name=file_path)\n    \n        try:\n>           validate(instance=response.json(), schema=schema)\n\ntest_jsonschema.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninstance = {'booking': {'additionalneeds': 'Breakfast', 'bookingdates': {'checkin': '2018-01-01', 'checkout': '2019-01-01'}, 'depositpaid': True, 'firstname': 'Amit', ...}, 'bookingid': 314}\nschema = {'$id': 'http://example.com/example.json', '$schema': 'https://json-schema.org/draft/2019-09/schema', 'additionalPrope...talprice', 'depositpaid', 'bookingdates', 'additionalneeds'], 'type': 'object'}, 'bookingid': {'type': 'string'}}, ...}\ncls = <class 'jsonschema.validators.Draft201909Validator'>, args = ()\nkwargs = {}\nvalidator = Draft201909Validator(schema={'$id': 'http://examp.../example.json', '$schema': 'https://json...019-09/schema', 'additi...d', 'bookingdates', 'additionalneeds'], 'type': 'object'}, 'bookingid': {'type': 'string'}}, ...}, format_checker=None)\nerror = <ValidationError: \"314 is not of type 'string'\">\n\n    def validate(instance, schema, cls=None, *args, **kwargs):  # noqa: D417\n        \"\"\"\n        Validate an instance under the given schema.\n    \n            >>> validate([2, 3, 4], {\"maxItems\": 2})\n            Traceback (most recent call last):\n                ...\n            ValidationError: [2, 3, 4] is too long\n    \n        :func:`~jsonschema.validators.validate` will first verify that the\n        provided schema is itself valid, since not doing so can lead to less\n        obvious error messages and fail in less obvious or consistent ways.\n    \n        If you know you have a valid schema already, especially\n        if you intend to validate multiple instances with\n        the same schema, you likely would prefer using the\n        `jsonschema.protocols.Validator.validate` method directly on a\n        specific validator (e.g. ``Draft202012Validator.validate``).\n    \n    \n        Arguments:\n    \n            instance:\n    \n                The instance to validate\n    \n            schema:\n    \n                The schema to validate with\n    \n            cls (jsonschema.protocols.Validator):\n    \n                The class that will be used to validate the instance.\n    \n        If the ``cls`` argument is not provided, two things will happen\n        in accordance with the specification. First, if the schema has a\n        :kw:`$schema` keyword containing a known meta-schema [#]_ then the\n        proper validator will be used. The specification recommends that\n        all schemas contain :kw:`$schema` properties for this reason. If no\n        :kw:`$schema` property is found, the default validator class is the\n        latest released draft.\n    \n        Any other provided positional and keyword arguments will be passed\n        on when instantiating the ``cls``.\n    \n        Raises:\n    \n            `jsonschema.exceptions.ValidationError`:\n    \n                if the instance is invalid\n    \n            `jsonschema.exceptions.SchemaError`:\n    \n                if the schema itself is invalid\n    \n        .. rubric:: Footnotes\n        .. [#] known by a validator registered with\n            `jsonschema.validators.validates`\n        \"\"\"\n        if cls is None:\n            cls = validator_for(schema)\n    \n        cls.check_schema(schema)\n        validator = cls(schema, *args, **kwargs)\n        error = exceptions.best_match(validator.iter_errors(instance))\n        if error is not None:\n>           raise error\nE           jsonschema.exceptions.ValidationError: 314 is not of type 'string'\nE           \nE           Failed validating 'type' in schema['properties']['bookingid']:\nE               {'type': 'string'}\nE           \nE           On instance['bookingid']:\nE               314\n\n../../../venv/lib/python3.11/site-packages/jsonschema/validators.py:1312: ValidationError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test.crud.test_jsonschema.TestCreateBookingJSONSchema object at 0x10ec37190>\n\n    @pytest.mark.positive\n    @allure.title(\"Verify that Create Booking Status and Booking ID shouldn't be null\")\n    @allure.description(\n        \"Creating a Booking from the paylaod and verfiy that booking id should not be null and status code should be 200 for the correct payload\")\n    def test_create_booking_schema(self):\n        response = post_request(url=APIConstants.url_create_booking(),\n                                auth=None,\n                                headers=Util().common_headers_json(),\n                                payload=payload_create_booking(),\n                                in_json=False)\n    \n        booking_id = response.json()[\"bookingid\"]\n    \n        verfiy_http_status_code(response_data=response, expect_data=200)\n        verify_json_key_for_not_null(booking_id)\n    \n        # response with schema.json stored\n        file_path = os.getcwd() + \"/create_schema.json\"\n        schema = self.load_schema(file_name=file_path)\n    \n        try:\n            validate(instance=response.json(), schema=schema)\n        except ValidationError as e:\n            print(e.message)\n>           pytest.fail(\"Failed : JSON schema error\")\nE           Failed: Failed : JSON schema error\n\ntest_jsonschema.py:50: Failed"}, "description": "Creating a Booking from the paylaod and verfiy that booking id should not be null and status code should be 200 for the correct payload", "attachments": [{"name": "stdout", "source": "bf8c4af7-b251-4e1f-acad-54afadec0603-attachment.txt", "type": "text/plain"}], "start": 1712112075722, "stop": 1712112077006, "uuid": "fea8c174-91be-43a0-a5e3-e80eb921698e", "historyId": "772b1d9df743c6d6ff83afb2dea721d4", "testCaseId": "772b1d9df743c6d6ff83afb2dea721d4", "fullName": "tests.test.crud.test_jsonschema.TestCreateBookingJSONSchema#test_create_booking_schema", "labels": [{"name": "tag", "value": "positive"}, {"name": "parentSuite", "value": "tests.test.crud"}, {"name": "suite", "value": "test_jsonschema"}, {"name": "subSuite", "value": "TestCreateBookingJSONSchema"}, {"name": "host", "value": "MBP-C02DRR20MD6M"}, {"name": "thread", "value": "17777-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test.crud.test_jsonschema"}]}